<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>单链表（如何轻松写出正确的链表代码）</title>
    <link href="/2022/11/06/linked-list/"/>
    <url>/2022/11/06/linked-list/</url>
    
    <content type="html"><![CDATA[<p>链表的基础知识其实很简单，但是要写出好的链表代码不是容易的事儿，尤其是那些复杂的链表操作，比如链表反转、有序链表合并，写的时候很容易出错。里面有很多指针<br>的指向，很容易搞得晕头转向，所以面试官也非常喜欢用链表来考察候选人。</p><p>为什么链表代码这么难写？究竟怎样才能比较轻松地写出正确的链表代码呢？</p><p>下面几个<strong>技巧</strong>可以帮助你。来看下吧</p><h2 id="技巧一：警惕指针丢失"><a href="#技巧一：警惕指针丢失" class="headerlink" title="技巧一：警惕指针丢失"></a>技巧一：警惕指针丢失</h2><p>我们在写链表代码的时候，指针指来指去，一会儿就不知道指针指哪里去了，所有我们一定要注意不要丢了指针。</p><img src="/assets/linkedlist.png" class="" title="单链表" alt="注意指针的指向"><p>如图所示，我们希望在结点 a 和相邻的结点 b 之间插入结点 c，如果我们将代码实现变成下面这个样子，就会发生指针丢失</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a.<span class="hljs-property">next</span> = c; <span class="hljs-comment">// 将a的next指针指向c结点；</span><br>c.<span class="hljs-property">next</span> = a.<span class="hljs-property">next</span>; <span class="hljs-comment">// 将c的结点的next指针指向b结点；</span><br></code></pre></td></tr></table></figure><p>初学者经常会在这儿犯错。a.next 指针在完成第一步操作之后，已经不再指向结点 b 了，而是指向结点 c。第 2 行代码相当于将 c 赋值给 c.next，自己指向自己。因此，整个链表也就断成了两半，从结点 b 往后的所有结点都无法访问到了。<br>所以，我们插入结点时，一定要注意操作的顺序，要先将结点 c 的 next 指针指向结点 b，再把结点 a 的 next 指针指向结点 c，这样才不会丢失指针，导致内存泄漏。所以，对于刚刚的插入代码，我们只需要把第 1 行和第 2 行代码的顺序颠倒一下就可以了。</p><h2 id="技巧二：举例画图，辅助思考"><a href="#技巧二：举例画图，辅助思考" class="headerlink" title="技巧二：举例画图，辅助思考"></a>技巧二：举例画图，辅助思考</h2><p>对于稍微复杂的链表操作，单链表反转，指针一会儿指这，一会儿指那，一会儿就被绕晕了。总感觉脑容量不够，想不清楚。所以这个时候就要使用大招了，画图法。<br>你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉到思路清晰很多。比如往单链表中插入一个数据这样一个操作，我一般都是把各种情况都举一个例子，画出插入前和插入后的链表变化。</p><h2 id="技巧三：-注意边界问题"><a href="#技巧三：-注意边界问题" class="headerlink" title="技巧三： 注意边界问题"></a>技巧三： 注意边界问题</h2><p>代码在一些边界或者异常情况下，最容易产生 Bug。链表代码也不例外。要实现没有 Bug 的链表代码，一定要在编写的过程中以及编写完成之后，检查边界条件是否考虑全面，以及代码在边界条件下是否能正确运行。</p><ul><li>如果链表为空时，代码是否能正常工作？</li><li>如果链表只包含一个结点时，代码是否能正常工作？</li><li>如果链表只包含两个结点时，代码是否能正常工作？</li><li>代码逻辑在处理头结点和尾结点的时候，是否能正常工作？</li></ul><p>5 个常见的单链表的操作:</p><ol><li>单链表反转</li><li>链表中环的检测</li><li>两个有序的链表合并</li><li>删除链表倒数第 n 个结点</li><li>求链表的中间结点</li></ol><p>完整的单链表例子：</p><figure class="highlight typescript"><figcaption><span>linklist.ts</span><a href="/downloads/code/linklist.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> {<br>  <span class="hljs-attr">element</span>: <span class="hljs-built_in">any</span>;<br>  <span class="hljs-attr">next</span>: <span class="hljs-title class_">ListNode</span> | <span class="hljs-literal">null</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">element</span>) {<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span> = element;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">next</span> = <span class="hljs-literal">null</span>;<br>  }<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span> {<br>  <span class="hljs-attr">head</span>: <span class="hljs-title class_">ListNode</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-string">&quot;head&quot;</span>);<br>  }<br>  <span class="hljs-title function_">findByValue</span>(<span class="hljs-params">item</span>) {<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>;<br>    <span class="hljs-keyword">while</span> (currentNode !== <span class="hljs-literal">null</span> &amp;&amp; currentNode.<span class="hljs-property">element</span> !== item) {<br>      currentNode = currentNode.<span class="hljs-property">next</span>;<br>    }<br>    <span class="hljs-keyword">return</span> currentNode !== <span class="hljs-literal">null</span> ? currentNode : <span class="hljs-literal">undefined</span>;<br>  }<br><br>  <span class="hljs-title function_">findByIndex</span>(<span class="hljs-params">pos</span>) {<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>,<br>      index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (currentNode !== <span class="hljs-literal">null</span> &amp;&amp; index !== pos) {<br>      currentNode = currentNode.<span class="hljs-property">next</span>;<br>      pos++;<br>    }<br>    <span class="hljs-keyword">return</span> currentNode !== <span class="hljs-literal">null</span> ? currentNode : <span class="hljs-literal">undefined</span>;<br>  }<br><br>  <span class="hljs-title function_">append</span>(<span class="hljs-params">newElement</span>) {<br>    <span class="hljs-keyword">const</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(newElement);<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>;<br>    <span class="hljs-keyword">while</span> (currentNode.<span class="hljs-property">next</span>) {<br>      currentNode = currentNode.<span class="hljs-property">next</span>;<br>    }<br>    currentNode.<span class="hljs-property">next</span> = newNode;<br>  }<br><br>  <span class="hljs-title function_">insert</span>(<span class="hljs-params">newElement, element</span>) {<br>    <span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findByValue</span>(element);<br>    <span class="hljs-keyword">if</span> (!node) {<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Not found&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    }<br>    <span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(newElement);<br>    newNode.<span class="hljs-property">next</span> = node.<span class="hljs-property">next</span>;<br>    node.<span class="hljs-property">next</span> = newNode;<br>  }<br><br>  <span class="hljs-title function_">findPrev</span>(<span class="hljs-params">item</span>) {<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>;<br>    <span class="hljs-keyword">while</span> (currentNode.<span class="hljs-property">next</span> !== <span class="hljs-literal">null</span> &amp;&amp; currentNode.<span class="hljs-property">next</span>.<span class="hljs-property">element</span> !== item) {<br>      currentNode = currentNode.<span class="hljs-property">next</span>;<br>    }<br>    <span class="hljs-keyword">if</span> (currentNode.<span class="hljs-property">next</span> !== <span class="hljs-literal">null</span>) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    }<br>    <span class="hljs-keyword">return</span> currentNode;<br>  }<br><br>  <span class="hljs-title function_">delete</span>(<span class="hljs-params">item</span>) {<br>    <span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findPrev</span>(item);<br>    <span class="hljs-keyword">if</span> (!node) {<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Not found&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    }<br>    node.<span class="hljs-property">next</span> = node.<span class="hljs-property">next</span>!.<span class="hljs-property">next</span>;<br>  }<br><br>  <span class="hljs-title function_">display</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>;<br>    <span class="hljs-keyword">while</span> (currentNode) {<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(currentNode.<span class="hljs-property">element</span>);<br>      currentNode = currentNode.<span class="hljs-property">next</span>;<br>    }<br>  }<br>  <span class="hljs-comment">// 反转单链表</span><br>  <span class="hljs-title function_">reverseList</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-string">&quot;head&quot;</span>);<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ListNode</span> | <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">while</span> (currentNode) {<br>      <span class="hljs-keyword">let</span> nextNode = currentNode.<span class="hljs-property">next</span>;<br>      currentNode.<span class="hljs-property">next</span> = newNode.<span class="hljs-property">next</span>;<br>      newNode.<span class="hljs-property">next</span> = currentNode;<br>      currentNode = nextNode;<br>    }<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = newNode;<br>  }<br>  <span class="hljs-comment">// 环检测</span><br>  <span class="hljs-title function_">circleCheck</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">let</span> fast = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>;<br>    <span class="hljs-keyword">let</span> slow = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ListNode</span> | <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">while</span> (fast !== <span class="hljs-literal">null</span> &amp;&amp; fast.<span class="hljs-property">next</span> !== <span class="hljs-literal">null</span>) {<br>      fast = fast.<span class="hljs-property">next</span>.<span class="hljs-property">next</span>;<br>      slow = slow!.<span class="hljs-property">next</span>;<br>      <span class="hljs-keyword">if</span> (slow === fast) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  }<br><br>  <span class="hljs-title function_">findMiddleNode</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">let</span> fast = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>;<br>    <span class="hljs-keyword">let</span> slow = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">ListNode</span> | <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (fast !== <span class="hljs-literal">null</span> &amp;&amp; fast.<span class="hljs-property">next</span> !== <span class="hljs-literal">null</span>) {<br>      fast = fast.<span class="hljs-property">next</span>;<br>      slow = slow!.<span class="hljs-property">next</span>;<br>    }<br>    <span class="hljs-keyword">return</span> slow;<br>  }<br>}<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mergeSortedList</span> = (<span class="hljs-params">listA: ListNode | <span class="hljs-literal">null</span>, listB: ListNode | <span class="hljs-literal">null</span></span>) =&gt; {<br>  <span class="hljs-keyword">if</span> (!listA) {<br>    <span class="hljs-keyword">return</span> listB;<br>  }<br>  <span class="hljs-keyword">if</span> (!listB) {<br>    <span class="hljs-keyword">return</span> listA;<br>  }<br><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">resultList</span>: <span class="hljs-title class_">ListNode</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">if</span> (listA.<span class="hljs-property">element</span> &lt; listB.<span class="hljs-property">element</span>) {<br>    resultList = listA;<br>    listA = listA.<span class="hljs-property">next</span>;<br>  } <span class="hljs-keyword">else</span> {<br>    resultList = listB;<br>    listB = listB.<span class="hljs-property">next</span>;<br>  }<br><br>  <span class="hljs-keyword">while</span> (listA !== <span class="hljs-literal">null</span> &amp;&amp; listB !== <span class="hljs-literal">null</span>) {<br>    <span class="hljs-keyword">if</span> (listA.<span class="hljs-property">element</span> &lt; listB.<span class="hljs-property">element</span>) {<br>      resultList.<span class="hljs-property">next</span> = listA;<br>      listA = listA.<span class="hljs-property">next</span>;<br>    } <span class="hljs-keyword">else</span> {<br>      resultList.<span class="hljs-property">next</span> = listB;<br>      listB = listB.<span class="hljs-property">next</span>;<br>    }<br>  }<br>  <span class="hljs-keyword">if</span> (listA) {<br>    resultList.<span class="hljs-property">next</span> = listA;<br>  }<br>  <span class="hljs-keyword">if</span> (listB) {<br>    resultList.<span class="hljs-property">next</span> = listB;<br>  }<br><br>  <span class="hljs-keyword">return</span> resultList;<br>};<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序</title>
    <link href="/2022/11/04/bubble-sort/"/>
    <url>/2022/11/04/bubble-sort/</url>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序-插入排序-选择排序"><a href="#冒泡排序-插入排序-选择排序" class="headerlink" title="冒泡排序, 插入排序, 选择排序"></a>冒泡排序, 插入排序, 选择排序</h2><p>最常用也是最基础的排序算法</p><figure class="highlight typescript"><figcaption><span>sort.ts</span><a href="/downloads/code/sort.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 冒泡排序</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">bubbleSort</span> = (<span class="hljs-params">originArr: <span class="hljs-built_in">number</span>[]</span>) =&gt; {<br>  <span class="hljs-keyword">let</span> arr = [...originArr];<br>  <span class="hljs-keyword">let</span> length = arr.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) {<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; length - <span class="hljs-number">1</span> - i; j++) {<br>      <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) {<br>        <span class="hljs-keyword">let</span> temp = arr[j + <span class="hljs-number">1</span>];<br>        arr[j + <span class="hljs-number">1</span>] = arr[j];<br>        arr[j] = temp;<br>        flag = <span class="hljs-literal">true</span>;<br>      }<br>    }<br>    <span class="hljs-keyword">if</span> (!flag) <span class="hljs-keyword">break</span>;<br>  }<br>  <span class="hljs-keyword">return</span> arr;<br>};<br><br><span class="hljs-comment">// 插入排序</span><br><span class="hljs-comment">// 插入排序分为未排序区间和已排序区间</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">insertSort</span> = (<span class="hljs-params">originArr: <span class="hljs-built_in">number</span>[]</span>) =&gt; {<br>  <span class="hljs-keyword">let</span> arr = [...originArr];<br>  <span class="hljs-keyword">let</span> len = arr.<span class="hljs-property">length</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; len; i++) {<br>    <span class="hljs-keyword">let</span> value = arr[i];<br>    <span class="hljs-keyword">let</span> j = i - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (j; j &gt;= <span class="hljs-number">0</span>; j--) {<br>      <span class="hljs-keyword">if</span> (arr[j] &gt; value) {<br>        arr[j + <span class="hljs-number">1</span>] = arr[j];<br>      } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">break</span>;<br>      }<br>    }<br>    arr[j + <span class="hljs-number">1</span>] = value;<br>  }<br>  <span class="hljs-keyword">return</span> arr;<br>};<br><br><span class="hljs-comment">// 选择排序</span><br><span class="hljs-comment">// 找到最小的然后跟前面的严肃调换位置</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">selectSort</span> = (<span class="hljs-params">originArr: <span class="hljs-built_in">number</span>[]</span>) =&gt; {<br>  <span class="hljs-keyword">const</span> arr = [...originArr];<br>  <span class="hljs-keyword">const</span> len = arr.<span class="hljs-property">length</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) {<br>    <span class="hljs-keyword">let</span> minIndex = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++) {<br>      <span class="hljs-keyword">if</span> (arr[j] &lt; arr[minIndex]) {<br>        minIndex = j;<br>      }<br>    }<br>    <span class="hljs-keyword">let</span> temp = arr[minIndex];<br>    arr[minIndex] = arr[i];<br>    arr[i] = temp;<br>  }<br>  <span class="hljs-keyword">return</span> arr;<br>};<br></code></pre></td></tr></table></figure><p>在线例子：</p><iframe src="https://codesandbox.io/p/sandbox/competent-morning-5jx5pb?file=/src/App.tsx&selection=%5B%7B%22endColumn%22:62,%22endLineNumber%22:98,%22startColumn%22:62,%22startLineNumber%22:98%7D%5D&workspace=%257B%2522activeFileId%2522%253A%2522cl9zkf3e9000alqiphi669wk8%2522%252C%2522openFiles%2522%253A%255B%2522%252FREADME.md%2522%252C%2522%252Fsrc%252FApp.tsx%2522%252C%2522%252Fsrc%252Findex.css%2522%252C%2522%252Fsrc%252FApp.css%2522%255D%252C%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522gitSidebarPanel%2522%253A%2522COMMIT%2522%252C%2522sidekickItems%2522%253A%255B%257B%2522type%2522%253A%2522PREVIEW%2522%252C%2522taskId%2522%253A%2522dev%2522%252C%2522port%2522%253A5173%252C%2522key%2522%253A%2522cla2gxvp0000m3b6prq66pgzx%2522%252C%2522isMinimized%2522%253Afalse%257D%255D%257D" width="100%" height="460" frameborder="0" loading="lazy" allowfullscreen></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
