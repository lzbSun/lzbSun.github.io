<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cookie SameSite 用法</title>
    <link href="/2022/11/09/cookie/"/>
    <url>/2022/11/09/cookie/</url>
    
    <content type="html"><![CDATA[<p>Cookie 是一种可用于向网站添加持久性状态的方法。每个 Cookie 都是一对 <code>key=value</code>，以及许多控制 Cookie 何时何地使用的属性。你可以使用这些属性设置诸如过期<br>日期或指定 Cookie 值仅仅可以通过 HTTPS 访问。服务器可以通过在响应头中设置 <code>Set-Cookie</code> 头来设置 Cookie。</p><p>假设您有一个博客，你想在其中向用户显示”最新消息”的宣传。用户可以选择不看这则宣传，然后在一段时间内，他们就不会再次看到这则宣传。您可以将用户的首选项存储在 cookie 中，<br>并设置为在一个月（2,600,000 秒）后过期，并且仅通过 HTTPS 发送。该标头如下所示：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Set-Cookie: <span class="hljs-attribute">promo_shown</span>=1; <span class="hljs-attribute">Max-Age</span>=2600000; Secure<br></code></pre></td></tr></table></figure><p>当你的读者查看的页面满足这些要求，即他们处于安全连接上且 Cookie 还不到一个月，那么他们的浏览器将在其请求中发送此标头：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Cookie: <span class="hljs-attribute">promo_shown</span>=1<br></code></pre></td></tr></table></figure><p>你还可以使用 <code>document.cookie</code> 在 JavaScript 中添加和读取该网站可用的 Cookie。<code>document.cookie</code> 进行赋值将创建或覆盖一个带有该键的 Cookie。例如，你可以在浏览器的 JavaScript 控制台中尝试以下操作：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">→ document.cookie <span class="hljs-operator">=</span> <span class="hljs-string">&quot;promo_shown=1; Max-Age=2600000; Secure&quot;</span><br>← <span class="hljs-string">&quot;promo_shown=1; Max-Age=2600000; Secure&quot;</span><br></code></pre></td></tr></table></figure><p>读取 <code>document.cookie</code> 将输出当前上下文中可访问的所有 Cookie，每个 Cookie 用分号进行分隔：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">→ document.cookie<span class="hljs-comment">;</span><br>← <span class="hljs-string">&quot;promo_shown=1; color_theme=peachpuff; sidebar_loc=left&quot;</span><br></code></pre></td></tr></table></figure><p>如果你在所选择的一系列热门网站上尝试此操作，就会注意到大多数网站设置的 Cookie 远不止三个。<br>在大多数情况下，这些 Cookie 会在每次向该域名发出请求时被发送，这会产生多种影响。对你的用户来说，上传带宽通常比下载更受限，因此，所有出站请求的开销都会使你的首字节时间发生延迟。<br>请在 Cookie 数量和大小的设置上做到保守。使用 <code>Max-Age</code> 属性来帮助确保 Cookie 的停留时间不会超过所需时间</p><h2 id="第一方和第三方-Cookie"><a href="#第一方和第三方-Cookie" class="headerlink" title="第一方和第三方 Cookie"></a>第一方和第三方 Cookie</h2><p>如果再回到你之前查看的那几个网站，可能会注意到不仅仅是你当前访问的域名有 Cookie，许多域名都有 Cookie。<br>与当前网站的域名（即浏览器地址栏中显示的内容）相匹配的 Cookie 被称为第一方 Cookie。同样，来自当前网站以外域名的 Cookie 被称为第三方 Cookie。<br>这不是一个绝对的标签，而是相对于用户上下文来决定的。同一个 Cookie 可以是第一方的，也可以是第三方的，具体取决于用户当时所在的网站。</p><p>继续上面的例子，假设你的一篇博文中有一张非常独特的照片，而这张照片被托管在&#x2F;assets&#x2F;iron_man.png。<br>因为照片十分令人惊叹，其他人直接在他们的网站上使用了该照片。如果访问者访问过您的博客并拥有 <code>promo_shown</code> cookie，那么当他们在其他人的网站上浏览 iron_man.png 时，就会在图像请求中发送该 Cookie。这对任何一方都不是特别有用，<br>因为 <code>promo_shown</code> 在其他人的网站上不用于任何内容，只是增加了请求的开销。</p><p>网络的其中一项文化属性就是它在默认情况下往往是开放的。这也是如此多的人得以在网络上创建自己的内容和应用程序的一部分原因。<br>然而，这也带来了许多安全和隐私问题。跨站请求伪造 (CSRF) 攻击依赖于这样一个事实，即 Cookie 会被附加到一个给定域名的任何请求（无论是谁发起请求）。<br>例如，如果你访问 <code>lzbsun.example</code>，那么它就可以触发对 <code>blog.example</code> 的请求，并且你的浏览器会欣然附加相关的 Cookie。如果你的博客对验证这些请求的方式没有多加留心，那么 <code>lzbsun.example</code> 可能会触发删除帖子或添加自己的内容等操作。</p><p>用户也越来越了解 Cookie 在跟踪他们跨多个站点的活动方面的用途。但直到现在还没有一种方法可以明确地说明你使用 Cookie 的意图。你应该只在第一方上下文中发送 <code>promo_shown</code> Cookie，而将应嵌入其他网站的小组件的会话 Cookie 用于在第三方上下文中提供登录状态。</p><h2 id="SameSite"><a href="#SameSite" class="headerlink" title="SameSite"></a>SameSite</h2><p><code>SameSite</code> 属性使你能够声明 Cookie 是否应限制为第一方或同站上下文。准确理解此处”站点”的含义将会非常有帮助。这里的站点是域名后缀和域名后缀之前部分的组合。例如， <a href="http://www.lzbsun.top/">www.lzbsun.top</a> 域名是 lzbsun.top 站点的一部分。</p><p><a href="https://publicsuffix.org/">公共后缀列表</a> 对这一点进行了定义，因此站点不仅仅是 <code>.com</code> 等顶级域名，还包括 <code>github.io</code> 等服务。这就使得 <code>lzbsun.github.io</code> 和 <code>example.github.io</code> 算作独立的站点。</p><blockquote><p>如果用户在 <code>lzbsun.github.io</code> 上向 <code>example.github.io</code> 请求图像，那么这是一个跨站请求。</p></blockquote><p>在 Cookie 上引入 <code>SameSite</code> 属性为控制此行为提供了三种不同的方式。你可以选择不指定属性，也可以使用 <code>Strict</code> 或 <code>Lax</code> 来将 Cookie 的使用限制在同站请求中。</p><p>如果您将 <code>SameSite</code> 设置为 <code>Strict</code> ，你的 Cookie 将仅在第一方上下文中被发送。就用户而言，只有当 Cookie 的站点与浏览器 URL 栏中当前显示的站点相匹配时，才会发送 Cookie。因此，如果 <code>promo_shown</code> cookie 设置如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Set-Cookie: <span class="hljs-attribute">promo_shown</span>=1; <span class="hljs-attribute">SameSite</span>=Strict<br></code></pre></td></tr></table></figure><p>当用户访问你的网站时，cookie 将按预期与请求一起被发送。<br>但是，当通过链接进入您的网站时（比如通过另一个网站或通过朋友的电子邮件），在最初的请求中不会发送 cookie。<br>这在你有与始终处于初始导航之后的功能（例如更改密码或进行购买）相关的 cookie 时是非常好的做法，但对 <code>promo_shown</code> 限制太大。如果你的读者通过链接进入网站，那么他们会希望通过发送 cookie 来实现他们的首选项。</p><p>这时候就需要通过允许这些顶级导航发送 cookie 来使用 <code>SameSite=Lax</code> 。让我们回到上文提到的钢铁侠的文章示例，其中，另一个站点正在引用你的内容。他们直接使用了你的照片并提供了你原始文章的链接。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://lzbsun.github.io/iron_man.png&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>阅读 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://lzbsun.github.io/iron_man.html&quot;</span>&gt;</span>article<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>并设置 cookie 为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Set-Cookie: <span class="hljs-attribute">promo_shown</span>=1; <span class="hljs-attribute">SameSite</span>=Lax<br></code></pre></td></tr></table></figure><p>当读者在另一个人的博客上时，cookie 在浏览器请求 iron_man.png 时不会被发送。<br>但是，当读者通过链接访问你博客上的 iron_man.html 时，相应请求将包含 cookie。这使得 <code>Lax</code> 非常适合用于影响网站显示的 cookie，而 <code>Strict</code> 对与用户正在执行的操作相关的 cookie 非常有用。</p><p>最后，还可以选择不指定值，而该做法在以前表示隐含地声明您希望在所有上下文中发送 cookie。<br>通过引入 <code>SameSite=None</code> 这个新的值来明确了这一点。这意味着你可以使用 <code>None</code> 来显式表示您有意希望在第三方上下文中发送 cookie。</p><blockquote><p>如果你提供其他站点使用的服务，例如小组件、嵌入内容、附属程序、广告或跨多个站点登录，那么你应该使用 None 来确保你的意图明确。</p></blockquote><h2 id="没有-SameSite-的情况下更改默认行为"><a href="#没有-SameSite-的情况下更改默认行为" class="headerlink" title="没有 SameSite 的情况下更改默认行为"></a>没有 SameSite 的情况下更改默认行为</h2><p>虽然 <code>SameSite</code> 属性得到广泛支持，但遗憾的是该属性并未被开发者广泛采用。<br>随处发送 cookie 的默认开放性意味着虽然所有用例都可以正常工作，但却会使用户容易受到 CSRF 和无意信息泄露的影响。为了鼓励开发者声明他们的意图并为用户提供更安全的体验，IETF 的渐进式改善 cookie 提案列出了两大关键变化：</p><ul><li>没有 <code>SameSite</code> 属性的 cookie 将被视为 <code>SameSite=Lax</code>。</li><li>具有 <code>SameSite=None</code> 的 cookie 还必须指定 <code>Secure</code> ，即这些 cookie 需要一个安全的上下文环境。</li></ul><h2 id="默认为-SameSite-x3D-Lax"><a href="#默认为-SameSite-x3D-Lax" class="headerlink" title="默认为 SameSite&#x3D;Lax"></a>默认为 SameSite&#x3D;Lax</h2><p>属性未设置的时候</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Set-Cookie: <span class="hljs-attribute">promo_shown</span>=1<br></code></pre></td></tr></table></figure><blockquote><p>如果你发送的 cookie 没有指定 <code>SameSite</code> 属性……</p></blockquote><p>默认行为设置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Set-Cookie: <span class="hljs-attribute">promo_shown</span>=1; <span class="hljs-attribute">SameSite</span>=Lax<br></code></pre></td></tr></table></figure><blockquote><p>浏览器会将该 cookie 视为已指定 <code>SameSite=Lax</code>。</p></blockquote><p>虽然这是为了应用更安全的默认值，但理想情况下你应该设置显式的 <code>SameSite</code> 属性，而不是依赖浏览器为你应用该属性。这会使你的 cookie 意图明确，并提高在不同浏览器之间获得一致体验的机率。</p><h2 id="SameSite-x3D-None-必须是安全的"><a href="#SameSite-x3D-None-必须是安全的" class="headerlink" title="SameSite&#x3D;None 必须是安全的"></a>SameSite&#x3D;None 必须是安全的</h2><p>Rejected</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Set-Cookie: <span class="hljs-attribute">widget_session</span>=abc123; <span class="hljs-attribute">SameSite</span>=None<br></code></pre></td></tr></table></figure><blockquote><p>设置一个没有 <code>Secure</code> 的 cookie 将被拒绝。</p></blockquote><p>Accepted</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Set-Cookie: <span class="hljs-attribute">widget_session</span>=abc123; <span class="hljs-attribute">SameSite</span>=None; Secure<br></code></pre></td></tr></table></figure><blockquote><p>您必须确保将 SameSite&#x3D;None 与 Secure 属性配对。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>HTTP</tag>
      
      <tag>Cookie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>top k</title>
    <link href="/2022/11/07/topk/"/>
    <url>/2022/11/07/topk/</url>
    
    <content type="html"><![CDATA[<blockquote><p>什么是 Top K 问题？简单来说就是在一组数据里面找到频率出现最高的前 K 个数，或前 K 大（当然也可以是前 K 小）的数。</p></blockquote><p>利于快排的思维可以快速的找到 top k（最大、最小） 元素</p><p>我们选择数组区间 A[0…n-1]的最后一个元素 A[n-1]作为 pivot，对数组 A[0…n-1]原地分区，这样数组就分成了三部分，A[0…p-1]、A[p]、A[p+1…n-1]。</p><p>如果 p+1&#x3D;K，那 A[p]就是要求解的元素；如果 K&gt;p+1, 说明第 K 大元素出现在 A[p+1…n-1]区间，我们再按照上面的思路递归地在 A[p+1…n-1]这个区间内查找。同理<br>如果 K &lt; p+1, 那么我们就在 A[0…p-1]</p><img src="/assets/topk.png" class="" title="最大"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">topK</span>(<span class="hljs-params">arr, k</span>) &#123;<br>  <span class="hljs-keyword">const</span> len = arr.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">if</span> (k &gt; len) &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">let</span> p = <span class="hljs-title function_">partition</span>(arr, <span class="hljs-number">0</span>, arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">while</span> (p + <span class="hljs-number">1</span> !== k) &#123;<br>    <span class="hljs-keyword">if</span> (k &gt; p + <span class="hljs-number">1</span>) &#123;<br>      p = <span class="hljs-title function_">partition</span>(arr, p + <span class="hljs-number">1</span>, arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      p = <span class="hljs-title function_">partition</span>(arr, <span class="hljs-number">0</span>, p - <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr[p];<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">partition</span>(<span class="hljs-params">arr, start, end</span>) &#123;<br>  <span class="hljs-keyword">let</span> startIndex = start;<br>  <span class="hljs-keyword">let</span> pivot = arr[end];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start; i &lt; end; i++) &#123;<br>    <span class="hljs-keyword">if</span> (arr[i] &gt; pivot) &#123;<br>      <span class="hljs-title function_">swap</span>(arr, i, startIndex);<br>      startIndex++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">swap</span>(arr, startIndex, end);<br>  <span class="hljs-keyword">return</span> startIndex;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">swap</span>(<span class="hljs-params">arr, i, j</span>) &#123;<br>  <span class="hljs-keyword">if</span> (i === j) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">let</span> tmp = arr[i];<br>  arr[i] = arr[j];<br>  arr[j] = tmp;<br>&#125;<br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br><span class="hljs-title function_">topK</span>(arr, <span class="hljs-number">1</span>); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><p>如果需要找最小的 k 我们只需要在我们的分区切换条件中改变大小判断的方向即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (arr[i] &lt; pivot)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单链表（如何轻松写出正确的链表代码）</title>
    <link href="/2022/11/06/linked-list/"/>
    <url>/2022/11/06/linked-list/</url>
    
    <content type="html"><![CDATA[<p>链表的基础知识其实很简单，但是要写出好的链表代码不是容易的事儿，尤其是那些复杂的链表操作，比如链表反转、有序链表合并，写的时候很容易出错。里面有很多指针<br>的指向，很容易搞得晕头转向，所以面试官也非常喜欢用链表来考察候选人。</p><p>为什么链表代码这么难写？究竟怎样才能比较轻松地写出正确的链表代码呢？</p><p>下面几个<strong>技巧</strong>可以帮助你。来看下吧</p><h2 id="技巧一：警惕指针丢失"><a href="#技巧一：警惕指针丢失" class="headerlink" title="技巧一：警惕指针丢失"></a>技巧一：警惕指针丢失</h2><p>我们在写链表代码的时候，指针指来指去，一会儿就不知道指针指哪里去了，所有我们一定要注意不要丢了指针。</p><img src="/assets/linkedlist.png" class="" title="单链表" alt="注意指针的指向"><p>如图所示，我们希望在结点 a 和相邻的结点 b 之间插入结点 c，如果我们将代码实现变成下面这个样子，就会发生指针丢失</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a.<span class="hljs-property">next</span> = c; <span class="hljs-comment">// 将a的next指针指向c结点；</span><br>c.<span class="hljs-property">next</span> = a.<span class="hljs-property">next</span>; <span class="hljs-comment">// 将c的结点的next指针指向b结点；</span><br></code></pre></td></tr></table></figure><p>初学者经常会在这儿犯错。a.next 指针在完成第一步操作之后，已经不再指向结点 b 了，而是指向结点 c。第 2 行代码相当于将 c 赋值给 c.next，自己指向自己。因此，整个链表也就断成了两半，从结点 b 往后的所有结点都无法访问到了。<br>所以，我们插入结点时，一定要注意操作的顺序，要先将结点 c 的 next 指针指向结点 b，再把结点 a 的 next 指针指向结点 c，这样才不会丢失指针，导致内存泄漏。所以，对于刚刚的插入代码，我们只需要把第 1 行和第 2 行代码的顺序颠倒一下就可以了。</p><h2 id="技巧二：举例画图，辅助思考"><a href="#技巧二：举例画图，辅助思考" class="headerlink" title="技巧二：举例画图，辅助思考"></a>技巧二：举例画图，辅助思考</h2><p>对于稍微复杂的链表操作，单链表反转，指针一会儿指这，一会儿指那，一会儿就被绕晕了。总感觉脑容量不够，想不清楚。所以这个时候就要使用大招了，画图法。<br>你可以找一个具体的例子，把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉到思路清晰很多。比如往单链表中插入一个数据这样一个操作，我一般都是把各种情况都举一个例子，画出插入前和插入后的链表变化。</p><h2 id="技巧三：-注意边界问题"><a href="#技巧三：-注意边界问题" class="headerlink" title="技巧三： 注意边界问题"></a>技巧三： 注意边界问题</h2><p>代码在一些边界或者异常情况下，最容易产生 Bug。链表代码也不例外。要实现没有 Bug 的链表代码，一定要在编写的过程中以及编写完成之后，检查边界条件是否考虑全面，以及代码在边界条件下是否能正确运行。</p><ul><li>如果链表为空时，代码是否能正常工作？</li><li>如果链表只包含一个结点时，代码是否能正常工作？</li><li>如果链表只包含两个结点时，代码是否能正常工作？</li><li>代码逻辑在处理头结点和尾结点的时候，是否能正常工作？</li></ul><p>5 个常见的单链表的操作:</p><ol><li>单链表反转</li><li>链表中环的检测</li><li>两个有序的链表合并</li><li>删除链表倒数第 n 个结点</li><li>求链表的中间结点</li></ol><p>完整的单链表例子：</p><figure class="highlight typescript"><figcaption><span>linklist.ts</span><a href="/downloads/code/linklist.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CListNode</span> {<br>  <span class="hljs-attr">element</span>: <span class="hljs-built_in">any</span>;<br>  <span class="hljs-attr">next</span>: <span class="hljs-title class_">CListNode</span> | <span class="hljs-literal">null</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">element</span>) {<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span> = element;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">next</span> = <span class="hljs-literal">null</span>;<br>  }<br>}<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CLinkedList</span> {<br>  <span class="hljs-attr">head</span>: <span class="hljs-title class_">CListNode</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CListNode</span>(<span class="hljs-string">&quot;head&quot;</span>);<br>  }<br>  <span class="hljs-title function_">findByValue</span>(<span class="hljs-params">item</span>) {<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>;<br>    <span class="hljs-keyword">while</span> (currentNode !== <span class="hljs-literal">null</span> &amp;&amp; currentNode.<span class="hljs-property">element</span> !== item) {<br>      currentNode = currentNode.<span class="hljs-property">next</span>;<br>    }<br>    <span class="hljs-keyword">return</span> currentNode !== <span class="hljs-literal">null</span> ? currentNode : <span class="hljs-literal">undefined</span>;<br>  }<br><br>  <span class="hljs-title function_">findByIndex</span>(<span class="hljs-params">pos</span>) {<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>,<br>      index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (currentNode !== <span class="hljs-literal">null</span> &amp;&amp; index !== pos) {<br>      currentNode = currentNode.<span class="hljs-property">next</span>;<br>      pos++;<br>    }<br>    <span class="hljs-keyword">return</span> currentNode !== <span class="hljs-literal">null</span> ? currentNode : <span class="hljs-literal">undefined</span>;<br>  }<br><br>  <span class="hljs-title function_">append</span>(<span class="hljs-params">newElement</span>) {<br>    <span class="hljs-keyword">const</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CListNode</span>(newElement);<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>;<br>    <span class="hljs-keyword">while</span> (currentNode.<span class="hljs-property">next</span>) {<br>      currentNode = currentNode.<span class="hljs-property">next</span>;<br>    }<br>    currentNode.<span class="hljs-property">next</span> = newNode;<br>  }<br><br>  <span class="hljs-title function_">insert</span>(<span class="hljs-params">newElement, element</span>) {<br>    <span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findByValue</span>(element);<br>    <span class="hljs-keyword">if</span> (!node) {<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Not found&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    }<br>    <span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CListNode</span>(newElement);<br>    newNode.<span class="hljs-property">next</span> = node.<span class="hljs-property">next</span>;<br>    node.<span class="hljs-property">next</span> = newNode;<br>  }<br><br>  <span class="hljs-title function_">findPrev</span>(<span class="hljs-params">item</span>) {<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>;<br>    <span class="hljs-keyword">while</span> (currentNode.<span class="hljs-property">next</span> !== <span class="hljs-literal">null</span> &amp;&amp; currentNode.<span class="hljs-property">next</span>.<span class="hljs-property">element</span> !== item) {<br>      currentNode = currentNode.<span class="hljs-property">next</span>;<br>    }<br>    <span class="hljs-keyword">if</span> (currentNode.<span class="hljs-property">next</span> !== <span class="hljs-literal">null</span>) {<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    }<br>    <span class="hljs-keyword">return</span> currentNode;<br>  }<br><br>  <span class="hljs-title function_">delete</span>(<span class="hljs-params">item</span>) {<br>    <span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findPrev</span>(item);<br>    <span class="hljs-keyword">if</span> (!node) {<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Not found&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    }<br>    node.<span class="hljs-property">next</span> = node.<span class="hljs-property">next</span>!.<span class="hljs-property">next</span>;<br>  }<br><br>  <span class="hljs-title function_">display</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>;<br>    <span class="hljs-keyword">while</span> (currentNode) {<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(currentNode.<span class="hljs-property">element</span>);<br>      currentNode = currentNode.<span class="hljs-property">next</span>;<br>    }<br>  }<br>  <span class="hljs-comment">// 反转单链表</span><br>  <span class="hljs-title function_">reverseList</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CListNode</span>(<span class="hljs-string">&quot;head&quot;</span>);<br>    <span class="hljs-keyword">let</span> currentNode = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">CListNode</span> | <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">while</span> (currentNode) {<br>      <span class="hljs-keyword">let</span> nextNode = currentNode.<span class="hljs-property">next</span>;<br>      currentNode.<span class="hljs-property">next</span> = newNode.<span class="hljs-property">next</span>;<br>      newNode.<span class="hljs-property">next</span> = currentNode;<br>      currentNode = nextNode;<br>    }<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = newNode;<br>  }<br>  <span class="hljs-comment">// 环检测</span><br>  <span class="hljs-title function_">circleCheck</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">let</span> fast = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>;<br>    <span class="hljs-keyword">let</span> slow = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">CListNode</span> | <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">while</span> (fast !== <span class="hljs-literal">null</span> &amp;&amp; fast.<span class="hljs-property">next</span> !== <span class="hljs-literal">null</span>) {<br>      fast = fast.<span class="hljs-property">next</span>.<span class="hljs-property">next</span>;<br>      slow = slow!.<span class="hljs-property">next</span>;<br>      <span class="hljs-keyword">if</span> (slow === fast) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  }<br><br>  <span class="hljs-title function_">findMiddleNode</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">let</span> fast = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>;<br>    <span class="hljs-keyword">let</span> slow = <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">CListNode</span> | <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (fast !== <span class="hljs-literal">null</span> &amp;&amp; fast.<span class="hljs-property">next</span> !== <span class="hljs-literal">null</span>) {<br>      fast = fast.<span class="hljs-property">next</span>.<span class="hljs-property">next</span>;<br>      slow = slow!.<span class="hljs-property">next</span>;<br>    }<br>    <span class="hljs-keyword">return</span> slow;<br>  }<br>}<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mergeSortedList</span> = (<span class="hljs-params">listA: CListNode | <span class="hljs-literal">null</span>, listB: CListNode | <span class="hljs-literal">null</span></span>) =&gt; {<br>  <span class="hljs-keyword">if</span> (!listA) {<br>    <span class="hljs-keyword">return</span> listB;<br>  }<br>  <span class="hljs-keyword">if</span> (!listB) {<br>    <span class="hljs-keyword">return</span> listA;<br>  }<br><br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">resultList</span>: <span class="hljs-title class_">CListNode</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">if</span> (listA.<span class="hljs-property">element</span> &lt; listB.<span class="hljs-property">element</span>) {<br>    resultList = listA;<br>    listA = listA.<span class="hljs-property">next</span>;<br>  } <span class="hljs-keyword">else</span> {<br>    resultList = listB;<br>    listB = listB.<span class="hljs-property">next</span>;<br>  }<br>  <span class="hljs-keyword">let</span> currentNode = resultList;<br>  <span class="hljs-keyword">while</span> (listA !== <span class="hljs-literal">null</span> &amp;&amp; listB !== <span class="hljs-literal">null</span>) {<br>    <span class="hljs-keyword">if</span> (listA.<span class="hljs-property">element</span> &lt; listB.<span class="hljs-property">element</span>) {<br>      currentNode.<span class="hljs-property">next</span> = listA;<br>      listA = listA.<span class="hljs-property">next</span>;<br>    } <span class="hljs-keyword">else</span> {<br>      currentNode.<span class="hljs-property">next</span> = listB;<br>      listB = listB.<span class="hljs-property">next</span>;<br>    }<br>    currentNode = currentNode.<span class="hljs-property">next</span>;<br>  }<br>  <span class="hljs-keyword">if</span> (listA) {<br>    currentNode.<span class="hljs-property">next</span> = listA;<br>  }<br>  <span class="hljs-keyword">if</span> (listB) {<br>    currentNode.<span class="hljs-property">next</span> = listB;<br>  }<br><br>  <span class="hljs-keyword">return</span> resultList;<br>};<br></code></pre></td></tr></table></figure><h3 id="例：合并两个有序单链表"><a href="#例：合并两个有序单链表" class="headerlink" title="例：合并两个有序单链表"></a>例：合并两个有序单链表</h3><blockquote><p>a { 1,4,5} b {3,7,9}</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> lista = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>lista.<span class="hljs-title function_">append</span>(<span class="hljs-number">1</span>);<br>lista.<span class="hljs-title function_">append</span>(<span class="hljs-number">5</span>);<br>lista.<span class="hljs-title function_">append</span>(<span class="hljs-number">7</span>);<br><br><span class="hljs-keyword">const</span> listb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>listb.<span class="hljs-title function_">append</span>(<span class="hljs-number">3</span>);<br>listb.<span class="hljs-title function_">append</span>(<span class="hljs-number">8</span>);<br>listb.<span class="hljs-title function_">append</span>(<span class="hljs-number">9</span>);<br><br><span class="hljs-keyword">let</span> mergeList = <span class="hljs-title function_">mergeListNode</span>(lista.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>, listb.<span class="hljs-property">head</span>.<span class="hljs-property">next</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mergeList);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序</title>
    <link href="/2022/11/04/bubble-sort/"/>
    <url>/2022/11/04/bubble-sort/</url>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序-插入排序-选择排序-归并排序-快排"><a href="#冒泡排序-插入排序-选择排序-归并排序-快排" class="headerlink" title="冒泡排序, 插入排序, 选择排序, 归并排序, 快排"></a>冒泡排序, 插入排序, 选择排序, 归并排序, 快排</h2><p>最常用也是最基础的排序算法</p><figure class="highlight typescript"><figcaption><span>sort.ts</span><a href="/downloads/code/sort.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 冒泡排序</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">bubbleSort</span> = (<span class="hljs-params">originArr: <span class="hljs-built_in">number</span>[]</span>) =&gt; {<br>  <span class="hljs-keyword">let</span> arr = [...originArr];<br>  <span class="hljs-keyword">let</span> length = arr.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) {<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; length - <span class="hljs-number">1</span> - i; j++) {<br>      <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) {<br>        <span class="hljs-keyword">let</span> temp = arr[j + <span class="hljs-number">1</span>];<br>        arr[j + <span class="hljs-number">1</span>] = arr[j];<br>        arr[j] = temp;<br>        flag = <span class="hljs-literal">true</span>;<br>      }<br>    }<br>    <span class="hljs-keyword">if</span> (!flag) <span class="hljs-keyword">break</span>;<br>  }<br>  <span class="hljs-keyword">return</span> arr;<br>};<br><br><span class="hljs-comment">// 插入排序</span><br><span class="hljs-comment">// 插入排序分为未排序区间和已排序区间</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">insertSort</span> = (<span class="hljs-params">originArr: <span class="hljs-built_in">number</span>[]</span>) =&gt; {<br>  <span class="hljs-keyword">let</span> arr = [...originArr];<br>  <span class="hljs-keyword">let</span> len = arr.<span class="hljs-property">length</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; len; i++) {<br>    <span class="hljs-keyword">let</span> value = arr[i];<br>    <span class="hljs-keyword">let</span> j = i - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (j; j &gt;= <span class="hljs-number">0</span>; j--) {<br>      <span class="hljs-keyword">if</span> (arr[j] &gt; value) {<br>        arr[j + <span class="hljs-number">1</span>] = arr[j];<br>      } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">break</span>;<br>      }<br>    }<br>    arr[j + <span class="hljs-number">1</span>] = value;<br>  }<br>  <span class="hljs-keyword">return</span> arr;<br>};<br><br><span class="hljs-comment">// 选择排序</span><br><span class="hljs-comment">// 找到最小的然后跟前面的元素调换位置</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">selectSort</span> = (<span class="hljs-params">originArr: <span class="hljs-built_in">number</span>[]</span>) =&gt; {<br>  <span class="hljs-keyword">const</span> arr = [...originArr];<br>  <span class="hljs-keyword">const</span> len = arr.<span class="hljs-property">length</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) {<br>    <span class="hljs-keyword">let</span> minIndex = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++) {<br>      <span class="hljs-keyword">if</span> (arr[j] &lt; arr[minIndex]) {<br>        minIndex = j;<br>      }<br>    }<br>    <span class="hljs-keyword">let</span> temp = arr[minIndex];<br>    arr[minIndex] = arr[i];<br>    arr[i] = temp;<br>  }<br>  <span class="hljs-keyword">return</span> arr;<br>};<br><br><span class="hljs-comment">// 归并排序</span><br><span class="hljs-comment">// 采用分治思想</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">mergeSort</span>: <span class="hljs-built_in">any</span> = <span class="hljs-function">(<span class="hljs-params">originArr: <span class="hljs-built_in">number</span>[]</span>) =&gt;</span> {<br>  <span class="hljs-keyword">const</span> arr = [...originArr];<br>  <span class="hljs-comment">// 当任意数组分解到只有一个时返回。</span><br>  <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> arr;<br><br>  <span class="hljs-keyword">const</span> len = arr.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">const</span> middle = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(len / <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">const</span> left = arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, middle);<br>  <span class="hljs-keyword">const</span> right = arr.<span class="hljs-title function_">slice</span>(middle);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">margeArr</span>(<span class="hljs-title function_">mergeSort</span>(left), <span class="hljs-title function_">mergeSort</span>(right));<br>};<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">margeArr</span> = (<span class="hljs-params">left: <span class="hljs-built_in">number</span>[], right: <span class="hljs-built_in">number</span>[]</span>) =&gt; {<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">temp</span>: <span class="hljs-built_in">number</span>[] = [];<br>  <span class="hljs-keyword">let</span> leftIndex = <span class="hljs-number">0</span>,<br>    leftLen = left.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">let</span> rightIndex = <span class="hljs-number">0</span>,<br>    rightLen = right.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">while</span> (leftIndex &lt; leftLen &amp;&amp; rightIndex &lt; rightLen) {<br>    <span class="hljs-keyword">if</span> (left[leftIndex] &lt; right[rightIndex]) {<br>      temp.<span class="hljs-title function_">push</span>(left[leftIndex]);<br>      leftIndex++;<br>    } <span class="hljs-keyword">else</span> {<br>      temp.<span class="hljs-title function_">push</span>(right[rightIndex]);<br>      rightIndex++;<br>    }<br>  }<br>  temp = temp.<span class="hljs-title function_">concat</span>(left.<span class="hljs-title function_">slice</span>(leftIndex)).<span class="hljs-title function_">concat</span>(right.<span class="hljs-title function_">slice</span>(rightIndex));<br>  <span class="hljs-keyword">return</span> temp;<br>};<br><br><span class="hljs-comment">// quick sort</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">quickSort</span> = (<span class="hljs-params">arr: <span class="hljs-built_in">number</span>[], left, right</span>) =&gt; {<br>  <span class="hljs-keyword">if</span> (left &lt; right) {<br>    <span class="hljs-keyword">let</span> pivot = right;<br>    <span class="hljs-keyword">let</span> partitionIndex = <span class="hljs-title function_">partition</span>(arr, pivot, left, right);<br>    <span class="hljs-title function_">quickSort</span>(arr, left, partitionIndex - <span class="hljs-number">1</span> &lt; left ? left : partitionIndex - <span class="hljs-number">1</span>);<br>    <span class="hljs-title function_">quickSort</span>(<br>      arr,<br>      partitionIndex + <span class="hljs-number">1</span> &gt; right ? right : partitionIndex + <span class="hljs-number">1</span>,<br>      right<br>    );<br>  }<br>};<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">partition</span> = (<span class="hljs-params">arr: <span class="hljs-built_in">number</span>[], pivot: <span class="hljs-built_in">number</span>, left: <span class="hljs-built_in">number</span>, right</span>) =&gt; {<br>  <span class="hljs-keyword">const</span> pivotVal = arr[pivot];<br>  <span class="hljs-keyword">let</span> startIndex = left;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = left; i &lt; right; i++) {<br>    <span class="hljs-keyword">if</span> (arr[i] &lt; pivotVal) {<br>      <span class="hljs-keyword">const</span> temp = arr[i];<br>      arr[i] = arr[startIndex];<br>      arr[startIndex] = temp;<br>      startIndex++;<br>    }<br>  }<br>  <span class="hljs-keyword">const</span> temp = arr[startIndex];<br>  arr[startIndex] = arr[pivot];<br>  arr[pivot] = temp;<br>  <span class="hljs-keyword">return</span> startIndex;<br>};<br></code></pre></td></tr></table></figure><p><strong>快排的思想很有意思</strong></p><p>快排的思想是这样的：如果要排序数组中下标从 p 到 r 之间的一组数据，我们选择 p 到 r 之间的任意一个数据作为 pivot（分区点）。</p><p>分区的整个过程</p><img src="/assets/quicksort.png" class=""><p>分区代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">partition</span> = (<span class="hljs-params">arr: <span class="hljs-built_in">number</span>[], pivot: <span class="hljs-built_in">number</span>, left: <span class="hljs-built_in">number</span>, right</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> pivotVal = arr[pivot];<br>  <span class="hljs-keyword">let</span> startIndex = left;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = left; i &lt; right; i++) &#123;<br>    <span class="hljs-keyword">if</span> (arr[i] &lt; pivotVal) &#123;<br>      <span class="hljs-keyword">const</span> temp = arr[i];<br>      arr[i] = arr[startIndex];<br>      arr[startIndex] = temp;<br>      startIndex++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">const</span> temp = arr[startIndex];<br>  arr[startIndex] = arr[pivot];<br>  arr[pivot] = temp;<br>  <span class="hljs-keyword">return</span> startIndex;<br>&#125;;<br></code></pre></td></tr></table></figure><p>最后整理快排代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">quickSort</span> = (<span class="hljs-params">arr: <span class="hljs-built_in">number</span>[], left, right</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">let</span> pivot = right;<br>    <span class="hljs-keyword">let</span> partitionIndex = <span class="hljs-title function_">partition</span>(arr, pivot, left, right);<br>    <span class="hljs-title function_">quickSort</span>(arr, left, partitionIndex - <span class="hljs-number">1</span> &lt; left ? left : partitionIndex - <span class="hljs-number">1</span>);<br>    <span class="hljs-title function_">quickSort</span>(<br>      arr,<br>      partitionIndex + <span class="hljs-number">1</span> &gt; right ? right : partitionIndex + <span class="hljs-number">1</span>,<br>      right<br>    );<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在线例子：</p><iframe src="https://codesandbox.io/p/sandbox/competent-morning-5jx5pb?file=/src/App.tsx&selection=%5B%7B%22endColumn%22:62,%22endLineNumber%22:98,%22startColumn%22:62,%22startLineNumber%22:98%7D%5D&workspace=%257B%2522activeFileId%2522%253A%2522cl9zkf3e9000alqiphi669wk8%2522%252C%2522openFiles%2522%253A%255B%2522%252FREADME.md%2522%252C%2522%252Fsrc%252FApp.tsx%2522%252C%2522%252Fsrc%252Findex.css%2522%252C%2522%252Fsrc%252FApp.css%2522%255D%252C%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522gitSidebarPanel%2522%253A%2522COMMIT%2522%252C%2522sidekickItems%2522%253A%255B%257B%2522type%2522%253A%2522PREVIEW%2522%252C%2522taskId%2522%253A%2522dev%2522%252C%2522port%2522%253A5173%252C%2522key%2522%253A%2522cla2gxvp0000m3b6prq66pgzx%2522%252C%2522isMinimized%2522%253Afalse%257D%255D%257D" width="100%" height="460" frameborder="0" loading="lazy" allowfullscreen></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
